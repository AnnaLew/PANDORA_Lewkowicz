script <- paste(script, "}")
return(script)
}
# Generate and save flowcharts for each rock type
rock_types <- unique(data$Rock.type)
for (rock_type in rock_types) {
subset_data <- data[data$Rock.type == rock_type, ]
script <- graph_script(subset_data, rock_type)
graph <- grViz(script)
svg_code <- export_svg(graph)
png_filename <- paste0(tolower(rock_type), "_flowchart.png")
rsvg_png(charToRaw(svg_code), file = png_filename)
}
# Define the rock classification as edges
edges <- "
digraph rock_chart {
node [shape=box, style=filled, fillcolor=lightblue]
"Igneous" -> "Normal crystalline igneous"
# Define the rock classification as edges
edges <- "digraph rock_chart {
node [shape=box, style=filled, fillcolor=lightblue];
\"Igneous\" -> \"Normal crystalline igneous\";
\"Normal crystalline igneous\" -> \"Fine-grained (volcanic) normal crystalline igneous\";
\"Fine-grained (volcanic) normal crystalline igneous\" -> \"Andesitoid\";
\"Andesitoid\" -> \"Andesite\";
\"Normal crystalline igneous\" -> \"Coarse-grained (plutonic) crystalline igneous\";
\"Coarse-grained (plutonic) crystalline igneous\" -> \"Anorthositoid\";
\"Anorthositoid\" -> \"Anorthosite\";
\"Fine-grained (volcanic) normal crystalline igneous\" -> \"Basaltoid\";
\"Basaltoid\" -> \"Basalt\";
\"Fine-grained (volcanic) normal crystalline igneous\" -> \"KREEP basalt\";
\"KREEP basalt\" -> \"Komatiite\";
}"
# Render the flowchart
DiagrammeR::grViz(edges)
# Define the rock classification including all types
edges <- "digraph rock_chart {
node [shape=box, style=filled, fillcolor=lightblue];
rankdir=LR;
# Igneous Rocks
\"Igneous\" -> \"Normal crystalline igneous\";
\"Normal crystalline igneous\" -> \"Fine-grained (volcanic) normal crystalline igneous\";
\"Normal crystalline igneous\" -> \"Coarse-grained (plutonic) crystalline igneous\";
\"Fine-grained (volcanic) normal crystalline igneous\" -> \"Andesitoid\", \"Basaltoid\", \"KREEP basalt\";
\"Coarse-grained (plutonic) crystalline igneous\" -> \"Anorthositoid\";
\"Andesitoid\" -> \"Andesite\";
\"Basaltoid\" -> \"Basalt\";
\"KREEP basalt\" -> \"Komatiite\";
\"Anorthositoid\" -> \"Anorthosite\";
# Metamorphic Rocks
\"Metamorphic\" -> \"Foliated metamorphic\";
\"Metamorphic\" -> \"Non-foliated metamorphic\";
\"Foliated metamorphic\" -> \"Schist\", \"Gneiss\";
\"Non-foliated metamorphic\" -> \"Marble\", \"Quartzite\";
# Sedimentary Rocks
\"Sedimentary\" -> \"Clastic sedimentary\";
\"Sedimentary\" -> \"Chemical sedimentary\";
\"Sedimentary\" -> \"Organic sedimentary\";
\"Clastic sedimentary\" -> \"Conglomerate\", \"Sandstone\", \"Shale\";
\"Chemical sedimentary\" -> \"Limestone\", \"Dolostone\";
\"Organic sedimentary\" -> \"Coal\";
}"
# Render the improved flowchart with all rock types
DiagrammeR::grViz(edges)
# Load data
data <- read_csv("All_rocks.csv", col_types = cols(.default = "c"), delim=';')
library(DiagrammeR)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
library(dplyr)
library(readr)
# Load data
data <- read_csv("All_rocks.csv", col_types = cols(.default = "c"), delim=';')
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
View(data)
# Remove rows with all NA values
cleaned_data <- data %>% filter(complete.cases(.))
# Get all hierarchical relationships by pivoting long
edges <- c()
for (i in 1:(ncol(cleaned_data) - 1)) {
parent_col <- colnames(cleaned_data)[i]
child_col <- colnames(cleaned_data)[i + 1]
temp_edges <- cleaned_data %>%
filter(!is.na(.data[[child_col]])) %>%
select(all_of(parent_col), all_of(child_col)) %>%
distinct() %>%
mutate(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
}
# Generate the flowchart script
graph_script <- paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
# Render the flowchart
DiagrammeR::grViz(graph_script)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Ensure proper handling of missing values
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
select(all_of(parent_col), all_of(child_col)) %>%
distinct() %>%
mutate(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Ensure proper handling of missing values
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
# Generate the flowchart script
graph_script <- paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
# Render the flowchart
DiagrammeR::grViz(graph_script)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Ensure proper handling of missing values while maintaining hierarchy
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]])) %>%
select(all_of(parent_col), all_of(child_col)) %>%
distinct() %>%
mutate(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
}
}
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Ensure proper handling of missing values while maintaining hierarchy
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
}
}
# Generate the flowchart script with wider layout
graph_script <- paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue, width=3];",
"rankdir=LR;",
"splines=ortho;",
paste(edges, collapse="\n"),
"}", sep="\n")
# Render the flowchart
DiagrammeR::grViz(graph_script)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Ensure proper handling of missing values
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
# Generate the flowchart script with increased width
graph_script <- paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
"graph [size=30, ratio=compress, dpi=100];",
paste(edges, collapse="\n"),
"}", sep="\n")
# Render the flowchart
DiagrammeR::grViz(graph_script)
# Ensure proper handling of missing values
edges <- c()
for (i in 1:(ncol(data) - 1)) {
parent_col <- colnames(data)[i]
for (j in (i + 1):ncol(data)) {
child_col <- colnames(data)[j]
temp_edges <- data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
# Generate the flowchart script
graph_script <- paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
# Render the flowchart
DiagrammeR::grViz(graph_script)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Function to generate graph script for a specific rock type
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
for (i in 1:(ncol(filtered_data) - 1)) {
parent_col <- colnames(filtered_data)[i]
for (j in (i + 1):ncol(filtered_data)) {
child_col <- colnames(filtered_data)[j]
temp_edges <- filtered_data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Function to sanitize names and remove quotes
sanitize_name <- function(name) {
name <- gsub('"', '', name)  # Remove quotes
name <- gsub('\\s+', ' ', name)  # Replace multiple spaces with a single space
trimws(name)  # Trim leading and trailing spaces
}
# Apply sanitization to all data
colnames(data) <- sanitize_name(colnames(data))
data <- data %>% mutate(across(everything(), ~sanitize_name(.)))
# Function to generate graph script for a specific rock type
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
for (i in 1:(ncol(filtered_data) - 1)) {
parent_col <- colnames(filtered_data)[i]
for (j in (i + 1):ncol(filtered_data)) {
child_col <- colnames(filtered_data)[j]
temp_edges <- filtered_data %>%
filter(!is.na(.data[[parent_col]]), !is.na(.data[[child_col]])) %>%
distinct() %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', .data[[child_col]], '";'))
edges <- c(edges, temp_edges$edge)
# If we find a non-NA child, stop extending further
if (nrow(temp_edges) > 0) break
}
}
paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
View(data)
cat("Sedimentary Rocks:\n")
DiagrammeR::grViz(sedimentary_graph)
cat("Metamorphic Rocks:\n")
DiagrammeR::grViz(metamorphic_graph)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Function to sanitize names and remove quotes
sanitize_name <- function(name) {
name <- gsub('"', '', name)  # Remove quotes
name <- gsub('\\s+', ' ', name)  # Replace multiple spaces with a single space
trimws(name)  # Trim leading and trailing spaces
}
# Apply sanitization to all data
colnames(data) <- sanitize_name(colnames(data))
data <- data %>% mutate(across(everything(), ~sanitize_name(.)))
# Function to generate graph script for a specific rock type, handling missing layers
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
for (i in 1:(ncol(filtered_data) - 1)) {
parent_col <- colnames(filtered_data)[i]
for (j in (i + 1):ncol(filtered_data)) {
child_col <- colnames(filtered_data)[j]
temp_edges <- filtered_data %>%
filter(!is.na(.data[[parent_col]])) %>%
group_by(.data[[parent_col]]) %>%
summarise(next_value = first(na.omit(.data[[child_col]])), .groups = 'drop') %>%
filter(!is.na(next_value)) %>%
transmute(edge = paste0('"', .data[[parent_col]], '" -> "', next_value, '";'))
edges <- c(edges, temp_edges$edge)
}
}
paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
# Load data
data <- read_delim("All_rocks.csv", delim=';', col_types = cols(.default = "c"))
# Function to sanitize names and remove quotes
sanitize_name <- function(name) {
name <- gsub('"', '', name)  # Remove quotes
name <- gsub('\\s+', ' ', name)  # Replace multiple spaces with a single space
trimws(name)  # Trim leading and trailing spaces
}
# Apply sanitization to all data
colnames(data) <- sanitize_name(colnames(data))
data <- data %>% mutate(across(everything(), ~sanitize_name(.)))
# Function to generate graph script for a specific rock type, handling missing layers
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
for (row in 1:nrow(filtered_data)) {
current_row <- filtered_data[row, ]
for (i in 1:(ncol(filtered_data) - 1)) {
parent <- current_row[[i]]
if (!is.na(parent)) {
for (j in (i + 1):ncol(filtered_data)) {
child <- current_row[[j]]
if (!is.na(child)) {
edges <- c(edges, paste0('"', parent, '" -> "', child, '";'))
break  # Ensure the first available non-NA column is linked correctly
}
}
}
}
}
paste("digraph rock_chart {",
"node [shape=box, style=filled, fillcolor=lightblue];",
"rankdir=LR;",
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
cat("Sedimentary Rocks:\n")
DiagrammeR::grViz(sedimentary_graph)
cat("Metamorphic Rocks:\n")
DiagrammeR::grViz(metamorphic_graph)
rsvg_png(charToRaw(svg_code), "igneous_rocks.png")
# Function to sanitize names and remove quotes
sanitize_name <- function(name) {
name <- gsub('"', '', name)  # Remove quotes
name <- gsub('\\s+', ' ', name)  # Replace multiple spaces with a single space
trimws(name)  # Trim leading and trailing spaces
}
# Apply sanitization to all data
colnames(data) <- sanitize_name(colnames(data))
data <- data %>% mutate(across(everything(), ~sanitize_name(.)))
# Define colors for different columns
column_colors <- c("#ff9999", "#66b3ff", "#99ff99", "#ffcc99", "#c2c2f0")  # Assign colors to layers
# Function to generate graph script with color-coding
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
nodes <- c()
for (row in 1:nrow(filtered_data)) {
current_row <- filtered_data[row, ]
for (i in 1:(ncol(filtered_data) - 1)) {
parent <- current_row[[i]]
if (!is.na(parent)) {
# Assign color based on column index
nodes <- c(nodes, paste0('"', parent, '" [style=filled, fillcolor="', column_colors[i], '"];'))
for (j in (i + 1):ncol(filtered_data)) {
child <- current_row[[j]]
if (!is.na(child)) {
nodes <- c(nodes, paste0('"', child, '" [style=filled, fillcolor="', column_colors[j], '"];'))
edges <- c(edges, paste0('"', parent, '" -> "', child, '";'))
break  # Ensure the first available non-NA column is linked correctly
}
}
}
}
}
paste("digraph rock_chart {",
"node [shape=box];",
"rankdir=LR;",
paste(nodes, collapse="\n"),
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
cat("Sedimentary Rocks:\n")
DiagrammeR::grViz(sedimentary_graph)
cat("Metamorphic Rocks:\n")
DiagrammeR::grViz(metamorphic_graph)
# Define colors for different columns
column_colors <- c("#ff9999", "#66b3ff", "#99ff99", "#ffcc99", "#c2c2f0", "#FFFF00")  # Assign colors to layers
# Function to generate graph script with color-coding
generate_graph_script <- function(rock_type, data) {
filtered_data <- data %>% filter(.data[[colnames(data)[1]]] == rock_type)
edges <- c()
nodes <- c()
for (row in 1:nrow(filtered_data)) {
current_row <- filtered_data[row, ]
for (i in 1:(ncol(filtered_data) - 1)) {
parent <- current_row[[i]]
if (!is.na(parent)) {
# Assign color based on column index
nodes <- c(nodes, paste0('"', parent, '" [style=filled, fillcolor="', column_colors[i], '"];'))
for (j in (i + 1):ncol(filtered_data)) {
child <- current_row[[j]]
if (!is.na(child)) {
nodes <- c(nodes, paste0('"', child, '" [style=filled, fillcolor="', column_colors[j], '"];'))
edges <- c(edges, paste0('"', parent, '" -> "', child, '";'))
break  # Ensure the first available non-NA column is linked correctly
}
}
}
}
}
paste("digraph rock_chart {",
"node [shape=box];",
"rankdir=LR;",
paste(nodes, collapse="\n"),
paste(edges, collapse="\n"),
"}", sep="\n")
}
# Generate separate graphs for each rock type
igneous_graph <- generate_graph_script("Igneous", data)
sedimentary_graph <- generate_graph_script("Sedimentary", data)
metamorphic_graph <- generate_graph_script("Metamorphic", data)
# Render the flowcharts
cat("Igneous Rocks:\n")
DiagrammeR::grViz(igneous_graph)
cat("Sedimentary Rocks:\n")
DiagrammeR::grViz(sedimentary_graph)
cat("Metamorphic Rocks:\n")
DiagrammeR::grViz(metamorphic_graph)
library(rsvg)
rsvg_png(charToRaw(svg_code), "igneous_rocks.png")
# Save Igneous Rocks graph
svg_igneous <- export_svg(DiagrammeR::grViz(igneous_graph))
rsvg_pdf(charToRaw(svg_igneous), "igneous_rocks.pdf")
# Save Sedimentary Rocks graph
svg_sedimentary <- export_svg(DiagrammeR::grViz(sedimentary_graph))
rsvg_pdf(charToRaw(svg_sedimentary), "sedimentary_rocks.pdf")
# Save Metamorphic Rocks graph
svg_metamorphic <- export_svg(DiagrammeR::grViz(metamorphic_graph))
rsvg_pdf(charToRaw(svg_metamorphic), "metamorphic_rocks.pdf")
# Convert and save Igneous Rocks graph
svg_igneous <- export_svg(DiagrammeR::grViz(igneous_graph))
rsvg_png(charToRaw(svg_igneous), "igneous_rocks.png")
# Convert and save Sedimentary Rocks graph
svg_sedimentary <- export_svg(DiagrammeR::grViz(sedimentary_graph))
rsvg_png(charToRaw(svg_sedimentary), "sedimentary_rocks.png")
# Convert and save Metamorphic Rocks graph
svg_metamorphic <- export_svg(DiagrammeR::grViz(metamorphic_graph))
rsvg_png(charToRaw(svg_metamorphic), "metamorphic_rocks.png")
